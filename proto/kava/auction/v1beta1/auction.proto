syntax = "proto3";
package kava.auction.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/kava-labs/kava/x/auction/types";

// SurplusAuction is a forward auction that burns what it receives from bids.
// It is normally used to sell off excess pegged asset acquired by the CDP system.
message SurplusAuction {
  int64 id = 1;

  string initiator = 2;

  bytes lot = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "lot,omitempty",
    (gogoproto.moretags)   = "yaml:\"lot\""
  ];

  string bidder = 4;

  bytes bid = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "bid,omitempty",
    (gogoproto.moretags)   = "yaml:\"bid\""
  ];

  bool has_received_bids = 6;

  google.protobuf.Timestamp end_time = 7
      [(gogoproto.nullable) = false, (gogoproto.stdtime) = true, (gogoproto.moretags) = "yaml:\"end_time,omitempty\""];

  google.protobuf.Timestamp max_end_time = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true,
    (gogoproto.moretags) = "yaml:\"max_end_time,omitempty\""
  ];
}

// DebtAuction is a reverse auction that mints what it pays out.
// It is normally used to acquire pegged asset to cover the CDP system's debts that were not covered by selling
// collateral.
message DebtAuction {
  int64 id = 1;

  string initiator = 2;

  bytes lot = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "lot,omitempty",
    (gogoproto.moretags)   = "yaml:\"lot\""
  ];

  string bidder = 4;

  bytes bid = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "bid,omitempty",
    (gogoproto.moretags)   = "yaml:\"bid\""
  ];

  bool has_received_bids = 6;

  google.protobuf.Timestamp end_time = 7
      [(gogoproto.nullable) = false, (gogoproto.stdtime) = true, (gogoproto.moretags) = "yaml:\"end_time,omitempty\""];

  google.protobuf.Timestamp max_end_time = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true,
    (gogoproto.moretags) = "yaml:\"max_end_time,omitempty\""
  ];

  bytes corresponding_debt = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "corresponding_debt,omitempty",
    (gogoproto.moretags)   = "yaml:\"corresponding_debt\""
  ];
}

// CollateralAuction is a two phase auction.
// Initially, in forward auction phase, bids can be placed up to a max bid.
// Then it switches to a reverse auction phase, where the initial amount up for auction is bid down.
// Unsold Lot is sent to LotReturns, being divided among the addresses by weight.
// Collateral auctions are normally used to sell off collateral seized from CDPs.
message CollateralAuction {
  int64 id = 1;

  string initiator = 2;

  bytes lot = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "lot,omitempty",
    (gogoproto.moretags)   = "yaml:\"lot\""
  ];

  string bidder = 4;

  bytes bid = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "bid,omitempty",
    (gogoproto.moretags)   = "yaml:\"bid\""
  ];

  bool has_received_bids = 6;

  google.protobuf.Timestamp end_time = 7
      [(gogoproto.nullable) = false, (gogoproto.stdtime) = true, (gogoproto.moretags) = "yaml:\"end_time,omitempty\""];

  google.protobuf.Timestamp max_end_time = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true,
    (gogoproto.moretags) = "yaml:\"max_end_time,omitempty\""
  ];

  bytes corresponding_debt = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "corresponding_debt,omitempty",
    (gogoproto.moretags)   = "yaml:\"corresponding_debt\""
  ];

  bytes max_bid = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "max_bid,omitempty",
    (gogoproto.moretags)   = "yaml:\"max_bid\""
  ];

  WeightedAddresses lot_returns = 11
      [(gogoproto.moretags) = "yaml:\"lot_returns,omitempty\"", (gogoproto.nullable) = false];
}

// WeightedAddresses is a type for storing some addresses and associated weights.
message WeightedAddresses {
  repeated string addresses = 1;

  repeated bytes weights = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "weights,omitempty",
    (gogoproto.moretags)   = "yaml:\"weights\""
  ];
}
